# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.collection_data_queries_position import CollectionDataQueriesPosition
from openapi_server import util

from openapi_server.models.collection_data_queries_position import CollectionDataQueriesPosition  # noqa: E501

class CollectionDataQueries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position=None, radius=None, area=None, cube=None, trajectory=None, corridor=None, locations=None, items=None):  # noqa: E501
        """CollectionDataQueries - a model defined in OpenAPI

        :param position: The position of this CollectionDataQueries.  # noqa: E501
        :type position: CollectionDataQueriesPosition
        :param radius: The radius of this CollectionDataQueries.  # noqa: E501
        :type radius: CollectionDataQueriesPosition
        :param area: The area of this CollectionDataQueries.  # noqa: E501
        :type area: CollectionDataQueriesPosition
        :param cube: The cube of this CollectionDataQueries.  # noqa: E501
        :type cube: CollectionDataQueriesPosition
        :param trajectory: The trajectory of this CollectionDataQueries.  # noqa: E501
        :type trajectory: CollectionDataQueriesPosition
        :param corridor: The corridor of this CollectionDataQueries.  # noqa: E501
        :type corridor: CollectionDataQueriesPosition
        :param locations: The locations of this CollectionDataQueries.  # noqa: E501
        :type locations: CollectionDataQueriesPosition
        :param items: The items of this CollectionDataQueries.  # noqa: E501
        :type items: CollectionDataQueriesPosition
        """
        self.openapi_types = {
            'position': CollectionDataQueriesPosition,
            'radius': CollectionDataQueriesPosition,
            'area': CollectionDataQueriesPosition,
            'cube': CollectionDataQueriesPosition,
            'trajectory': CollectionDataQueriesPosition,
            'corridor': CollectionDataQueriesPosition,
            'locations': CollectionDataQueriesPosition,
            'items': CollectionDataQueriesPosition
        }

        self.attribute_map = {
            'position': 'position',
            'radius': 'radius',
            'area': 'area',
            'cube': 'cube',
            'trajectory': 'trajectory',
            'corridor': 'corridor',
            'locations': 'locations',
            'items': 'items'
        }

        self._position = position
        self._radius = radius
        self._area = area
        self._cube = cube
        self._trajectory = trajectory
        self._corridor = corridor
        self._locations = locations
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'CollectionDataQueries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collection_data_queries of this CollectionDataQueries.  # noqa: E501
        :rtype: CollectionDataQueries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self):
        """Gets the position of this CollectionDataQueries.


        :return: The position of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CollectionDataQueries.


        :param position: The position of this CollectionDataQueries.
        :type position: CollectionDataQueriesPosition
        """

        self._position = position

    @property
    def radius(self):
        """Gets the radius of this CollectionDataQueries.


        :return: The radius of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this CollectionDataQueries.


        :param radius: The radius of this CollectionDataQueries.
        :type radius: CollectionDataQueriesPosition
        """

        self._radius = radius

    @property
    def area(self):
        """Gets the area of this CollectionDataQueries.


        :return: The area of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this CollectionDataQueries.


        :param area: The area of this CollectionDataQueries.
        :type area: CollectionDataQueriesPosition
        """

        self._area = area

    @property
    def cube(self):
        """Gets the cube of this CollectionDataQueries.


        :return: The cube of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._cube

    @cube.setter
    def cube(self, cube):
        """Sets the cube of this CollectionDataQueries.


        :param cube: The cube of this CollectionDataQueries.
        :type cube: CollectionDataQueriesPosition
        """

        self._cube = cube

    @property
    def trajectory(self):
        """Gets the trajectory of this CollectionDataQueries.


        :return: The trajectory of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._trajectory

    @trajectory.setter
    def trajectory(self, trajectory):
        """Sets the trajectory of this CollectionDataQueries.


        :param trajectory: The trajectory of this CollectionDataQueries.
        :type trajectory: CollectionDataQueriesPosition
        """

        self._trajectory = trajectory

    @property
    def corridor(self):
        """Gets the corridor of this CollectionDataQueries.


        :return: The corridor of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._corridor

    @corridor.setter
    def corridor(self, corridor):
        """Sets the corridor of this CollectionDataQueries.


        :param corridor: The corridor of this CollectionDataQueries.
        :type corridor: CollectionDataQueriesPosition
        """

        self._corridor = corridor

    @property
    def locations(self):
        """Gets the locations of this CollectionDataQueries.


        :return: The locations of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CollectionDataQueries.


        :param locations: The locations of this CollectionDataQueries.
        :type locations: CollectionDataQueriesPosition
        """

        self._locations = locations

    @property
    def items(self):
        """Gets the items of this CollectionDataQueries.


        :return: The items of this CollectionDataQueries.
        :rtype: CollectionDataQueriesPosition
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CollectionDataQueries.


        :param items: The items of this CollectionDataQueries.
        :type items: CollectionDataQueriesPosition
        """

        self._items = items
